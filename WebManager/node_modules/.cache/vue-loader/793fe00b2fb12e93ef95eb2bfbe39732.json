{"remainingRequest":"I:\\Project\\CampusPost-GraduationProject\\WebManager\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!I:\\Project\\CampusPost-GraduationProject\\WebManager\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!I:\\Project\\CampusPost-GraduationProject\\WebManager\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!I:\\Project\\CampusPost-GraduationProject\\WebManager\\src\\components\\manage\\DormitoryDistribution.vue?vue&type=template&id=07c0400f&scoped=true&","dependencies":[{"path":"I:\\Project\\CampusPost-GraduationProject\\WebManager\\src\\components\\manage\\DormitoryDistribution.vue","mtime":1627198309552},{"path":"I:\\Project\\CampusPost-GraduationProject\\WebManager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"I:\\Project\\CampusPost-GraduationProject\\WebManager\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"I:\\Project\\CampusPost-GraduationProject\\WebManager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"I:\\Project\\CampusPost-GraduationProject\\WebManager\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}